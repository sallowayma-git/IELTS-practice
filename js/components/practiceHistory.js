/**
 * ÁªÉ‰π†ÂéÜÂè≤Êü•ÁúãÁªÑ‰ª∂
 * Êèê‰æõÂéÜÂè≤ËÆ∞ÂΩïÂàóË°®„ÄÅËØ¶ÁªÜËßÜÂõæ„ÄÅÁ≠õÈÄâÊêúÁ¥¢ÂíåÂØºÂá∫ÂäüËÉΩ
 */
class PracticeHistory {
    constructor() {
        this.currentRecords = [];
        this.filteredRecords = [];
        this.currentPage = 1;
        this.recordsPerPage = 20;
        this.sortBy = 'startTime';
        this.sortOrder = 'desc';
        this.filters = {
            category: 'all',
            frequency: 'all',
            status: 'all',
            dateRange: 'all',
            minAccuracy: 0,
            maxAccuracy: 100
        };
        this.searchQuery = '';
        
        this.initialize();
    }

    /**
     * ÂàùÂßãÂåñÁªÑ‰ª∂
     */
    initialize() {
        console.log('PracticeHistory component initialized');
        this.setupEventListeners();
        this.createHistoryInterface();
    }

    /**
     * ËÆæÁΩÆ‰∫ã‰ª∂ÁõëÂê¨Âô®
     */
    setupEventListeners() {
        // ÁõëÂê¨ÁªÉ‰π†ÂÆåÊàê‰∫ã‰ª∂ÔºåËá™Âä®Âà∑Êñ∞ÂéÜÂè≤ËÆ∞ÂΩï
        document.addEventListener('practiceSessionCompleted', () => {
            this.refreshHistory();
        });
        
        // ÁõëÂê¨ËßÜÂõæÊøÄÊ¥ª‰∫ã‰ª∂
        document.addEventListener('click', (e) => {
            // ÂéÜÂè≤ËÆ∞ÂΩïÈ°πÁÇπÂáª
            const recordItem = e.target.closest('.history-record-item');
            if (recordItem) {
                const recordId = recordItem.dataset.recordId;
                this.showRecordDetails(recordId);
            }
            
            // Êìç‰ΩúÊåâÈíÆÁÇπÂáª
            const actionBtn = e.target.closest('[data-history-action]');
            if (actionBtn) {
                e.preventDefault();
                e.stopPropagation();
                const action = actionBtn.dataset.historyAction;
                const recordId = actionBtn.dataset.recordId;
                this.handleRecordAction(action, recordId);
            }
            
            // ÂàÜÈ°µÊåâÈíÆÁÇπÂáª
            const pageBtn = e.target.closest('.page-btn');
            if (pageBtn && !pageBtn.classList.contains('disabled')) {
                const page = parseInt(pageBtn.dataset.page);
                this.goToPage(page);
            }
        });
        
        // ÈîÆÁõòÂø´Êç∑ÈîÆ
        document.addEventListener('keydown', (e) => {
            if (document.getElementById('practice-view').classList.contains('active')) {
                switch (e.key) {
                    case 'r':
                        if (e.ctrlKey || e.metaKey) {
                            e.preventDefault();
                            this.refreshHistory();
                        }
                        break;
                    case 'e':
                        if (e.ctrlKey || e.metaKey) {
                            e.preventDefault();
                            this.exportHistory();
                        }
                        break;
                }
            }
        });
    }

    /**
     * ÂàõÂª∫ÂéÜÂè≤ËÆ∞ÂΩïÁïåÈù¢
     */
    createHistoryInterface() {
        const practiceView = document.getElementById('practice-view');
        if (!practiceView) return;
        
        practiceView.innerHTML = `
            <div class="practice-history-container">
                <div class="history-header">
                    <h2>ÁªÉ‰π†ÂéÜÂè≤ËÆ∞ÂΩï</h2>
                    <div class="history-actions">
                        <button class="btn btn-primary" onclick="window.app.components.practiceHistory.refreshHistory()">
                            <span class="btn-icon">üîÑ</span>
                            Âà∑Êñ∞
                        </button>
                        <button class="btn btn-secondary" onclick="window.app.components.practiceHistory.exportHistory()">
                            <span class="btn-icon">üì•</span>
                            ÂØºÂá∫
                        </button>
                        <button class="btn btn-outline" onclick="window.app.components.practiceHistory.showImportDialog()">
                            <span class="btn-icon">üì§</span>
                            ÂØºÂÖ•
                        </button>
                    </div>
                </div>
                
                <div class="history-filters">
                    <div class="filter-row">
                        <select id="category-filter" class="filter-select">
                            <option value="all">ÂÖ®ÈÉ®ÂàÜÁ±ª</option>
                            <option value="P1">P1</option>
                            <option value="P2">P2</option>
                            <option value="P3">P3</option>
                        </select>
                        
                        <select id="frequency-filter" class="filter-select">
                            <option value="all">ÂÖ®ÈÉ®È¢ëÁéá</option>
                            <option value="high">È´òÈ¢ë</option>
                            <option value="low">Ê¨°È´òÈ¢ë</option>
                        </select>
                        
                        <select id="status-filter" class="filter-select">
                            <option value="all">ÂÖ®ÈÉ®Áä∂ÊÄÅ</option>
                            <option value="completed">Â∑≤ÂÆåÊàê</option>
                            <option value="interrupted">‰∏≠Êñ≠</option>
                        </select>
                        
                        <select id="date-range-filter" class="filter-select">
                            <option value="all">ÂÖ®ÈÉ®Êó∂Èó¥</option>
                            <option value="today">‰ªäÂ§©</option>
                            <option value="week">Êú¨Âë®</option>
                            <option value="month">Êú¨Êúà</option>
                            <option value="custom">Ëá™ÂÆö‰πâ</option>
                        </select>
                    </div>
                    
                    <div class="filter-row">
                        <div class="accuracy-filter">
                            <label>Ê≠£Á°ÆÁéáËåÉÂõ¥Ôºö</label>
                            <input type="range" id="min-accuracy" min="0" max="100" value="0" class="accuracy-slider">
                            <span id="min-accuracy-value">0%</span>
                            <span>-</span>
                            <input type="range" id="max-accuracy" min="0" max="100" value="100" class="accuracy-slider">
                            <span id="max-accuracy-value">100%</span>
                        </div>
                        
                        <div class="search-filter">
                            <input type="text" id="history-search" placeholder="ÊêúÁ¥¢È¢òÁõÆÊ†áÈ¢ò..." class="search-input">
                        </div>
                        
                        <button class="btn btn-outline btn-sm" onclick="window.app.components.practiceHistory.resetFilters()">
                            ÈáçÁΩÆÁ≠õÈÄâ
                        </button>
                    </div>
                    
                    <div id="custom-date-range" class="custom-date-range" style="display: none;">
                        <input type="date" id="start-date" class="date-input">
                        <span>Ëá≥</span>
                        <input type="date" id="end-date" class="date-input">
                        <button class="btn btn-sm btn-primary" onclick="window.app.components.practiceHistory.applyDateRange()">
                            Â∫îÁî®
                        </button>
                    </div>
                </div>
                
                <div class="history-stats">
                    <div class="stat-item">
                        <span class="stat-label">ÊÄªÁªÉ‰π†Ê¨°Êï∞</span>
                        <span class="stat-value" id="total-practices">0</span>
                    </div>
                    <div class="stat-item">
                        <span class="stat-label">Âπ≥ÂùáÊ≠£Á°ÆÁéá</span>
                        <span class="stat-value" id="avg-accuracy">0%</span>
                    </div>
                    <div class="stat-item">
                        <span class="stat-label">ÊÄªÁî®Êó∂</span>
                        <span class="stat-value" id="total-time">0</span>
                    </div>
                    <div class="stat-item">
                        <span class="stat-label">ÊòæÁ§∫ËÆ∞ÂΩï</span>
                        <span class="stat-value" id="filtered-count">0</span>
                    </div>
                </div>
                
                <div class="history-controls">
                    <div class="sort-controls">
                        <label>ÊéíÂ∫èÔºö</label>
                        <select id="sort-by" class="sort-select">
                            <option value="startTime">ÁªÉ‰π†Êó∂Èó¥</option>
                            <option value="accuracy">Ê≠£Á°ÆÁéá</option>
                            <option value="duration">Áî®Êó∂</option>
                            <option value="examTitle">È¢òÁõÆÊ†áÈ¢ò</option>
                        </select>
                        <select id="sort-order" class="sort-select">
                            <option value="desc">ÈôçÂ∫è</option>
                            <option value="asc">ÂçáÂ∫è</option>
                        </select>
                    </div>
                    
                    <div class="view-controls">
                        <label>ÊØèÈ°µÊòæÁ§∫Ôºö</label>
                        <select id="records-per-page" class="records-select">
                            <option value="10">10Êù°</option>
                            <option value="20" selected>20Êù°</option>
                            <option value="50">50Êù°</option>
                            <option value="100">100Êù°</option>
                        </select>
                    </div>
                </div>
                
                <div class="history-list" id="history-list">
                    <!-- ÂéÜÂè≤ËÆ∞ÂΩïÂàóË°®Â∞ÜÂú®ËøôÈáåÁîüÊàê -->
                </div>
                
                <div class="history-pagination" id="history-pagination">
                    <!-- ÂàÜÈ°µÊéß‰ª∂Â∞ÜÂú®ËøôÈáåÁîüÊàê -->
                </div>
            </div>
        `;
        
        this.setupFilterEvents();
        this.loadHistory();
    }

    /**
     * ËÆæÁΩÆÁ≠õÈÄâÂô®‰∫ã‰ª∂
     */
    setupFilterEvents() {
        // Á≠õÈÄâÂô®ÂèòÂåñ‰∫ã‰ª∂
        const filterElements = [
            'category-filter', 'frequency-filter', 'status-filter', 
            'date-range-filter', 'sort-by', 'sort-order', 'records-per-page'
        ];
        
        filterElements.forEach(id => {
            const element = document.getElementById(id);
            if (element) {
                element.addEventListener('change', () => {
                    this.updateFiltersFromUI();
                    this.applyFilters();
                });
            }
        });
        
        // Ê≠£Á°ÆÁéáÊªëÂùó‰∫ã‰ª∂
        const minAccuracy = document.getElementById('min-accuracy');
        const maxAccuracy = document.getElementById('max-accuracy');
        
        if (minAccuracy && maxAccuracy) {
            minAccuracy.addEventListener('input', (e) => {
                document.getElementById('min-accuracy-value').textContent = e.target.value + '%';
                this.filters.minAccuracy = parseInt(e.target.value);
                this.applyFilters();
            });
            
            maxAccuracy.addEventListener('input', (e) => {
                document.getElementById('max-accuracy-value').textContent = e.target.value + '%';
                this.filters.maxAccuracy = parseInt(e.target.value);
                this.applyFilters();
            });
        }
        
        // ÊêúÁ¥¢ËæìÂÖ•‰∫ã‰ª∂
        const searchInput = document.getElementById('history-search');
        if (searchInput) {
            searchInput.addEventListener('input', Utils.debounce((e) => {
                this.searchQuery = e.target.value.trim().toLowerCase();
                this.applyFilters();
            }, 300));
        }
        
        // Êó•ÊúüËåÉÂõ¥Á≠õÈÄâÂô®
        const dateRangeFilter = document.getElementById('date-range-filter');
        if (dateRangeFilter) {
            dateRangeFilter.addEventListener('change', (e) => {
                const customDateRange = document.getElementById('custom-date-range');
                if (e.target.value === 'custom') {
                    customDateRange.style.display = 'block';
                } else {
                    customDateRange.style.display = 'none';
                }
            });
        }
    }

    /**
     * ‰ªéUIÊõ¥Êñ∞Á≠õÈÄâÂô®
     */
    updateFiltersFromUI() {
        this.filters.category = document.getElementById('category-filter')?.value || 'all';
        this.filters.frequency = document.getElementById('frequency-filter')?.value || 'all';
        this.filters.status = document.getElementById('status-filter')?.value || 'all';
        this.filters.dateRange = document.getElementById('date-range-filter')?.value || 'all';
        
        this.sortBy = document.getElementById('sort-by')?.value || 'startTime';
        this.sortOrder = document.getElementById('sort-order')?.value || 'desc';
        this.recordsPerPage = parseInt(document.getElementById('records-per-page')?.value || '20');
        
        // ÈáçÁΩÆÂà∞Á¨¨‰∏ÄÈ°µ
        this.currentPage = 1;
    }

    /**
     * Âä†ËΩΩÂéÜÂè≤ËÆ∞ÂΩï
     */
    async loadHistory() {
        try {
            // Ëé∑ÂèñÁªÉ‰π†ËÆ∞ÂΩïÂô®ÂÆû‰æã
            const practiceRecorder = window.app?.components?.practiceRecorder;
            if (!practiceRecorder) {
                throw new Error('PracticeRecorder not available');
            }
            
            // Ëé∑ÂèñÊâÄÊúâËÆ∞ÂΩï
            this.currentRecords = practiceRecorder.getPracticeRecords();
            
            // Â∫îÁî®Á≠õÈÄâÂíåÊéíÂ∫è
            this.applyFilters();
            
            console.log(`Loaded ${this.currentRecords.length} practice records`);
            
        } catch (error) {
            console.error('Failed to load practice history:', error);
            this.showError('Âä†ËΩΩÂéÜÂè≤ËÆ∞ÂΩïÂ§±Ë¥•');
        }
    }

    /**
     * Âà∑Êñ∞ÂéÜÂè≤ËÆ∞ÂΩï
     */
    refreshHistory() {
        this.loadHistory();
    }

    /**
     * Â∫îÁî®Á≠õÈÄâÂô®
     */
    applyFilters() {
        let filtered = [...this.currentRecords];
        
        // Â∫îÁî®ÂàÜÁ±ªÁ≠õÈÄâ
        if (this.filters.category !== 'all') {
            filtered = filtered.filter(record => 
                record.metadata.category === this.filters.category
            );
        }
        
        // Â∫îÁî®È¢ëÁéáÁ≠õÈÄâ
        if (this.filters.frequency !== 'all') {
            filtered = filtered.filter(record => 
                record.metadata.frequency === this.filters.frequency
            );
        }
        
        // Â∫îÁî®Áä∂ÊÄÅÁ≠õÈÄâ
        if (this.filters.status !== 'all') {
            filtered = filtered.filter(record => 
                record.status === this.filters.status
            );
        }
        
        // Â∫îÁî®Êó•ÊúüËåÉÂõ¥Á≠õÈÄâ
        filtered = this.applyDateRangeFilter(filtered);
        
        // Â∫îÁî®Ê≠£Á°ÆÁéáÁ≠õÈÄâ
        filtered = filtered.filter(record => {
            const accuracy = Math.round(record.accuracy * 100);
            return accuracy >= this.filters.minAccuracy && accuracy <= this.filters.maxAccuracy;
        });
        
        // Â∫îÁî®ÊêúÁ¥¢Á≠õÈÄâ
        if (this.searchQuery) {
            filtered = filtered.filter(record => {
                const title = (record.metadata.examTitle || '').toLowerCase();
                const examId = (record.examId || '').toLowerCase();
                return title.includes(this.searchQuery) || examId.includes(this.searchQuery);
            });
        }
        
        // Â∫îÁî®ÊéíÂ∫è
        filtered = this.applySorting(filtered);
        
        this.filteredRecords = filtered;
        
        // Êõ¥Êñ∞ÁªüËÆ°‰ø°ÊÅØ
        this.updateHistoryStats();
        
        // Ê∏≤ÊüìËÆ∞ÂΩïÂàóË°®
        this.renderHistoryList();
        
        // Ê∏≤ÊüìÂàÜÈ°µ
        this.renderPagination();
    }

    /**
     * Â∫îÁî®Êó•ÊúüËåÉÂõ¥Á≠õÈÄâ
     */
    applyDateRangeFilter(records) {
        if (this.filters.dateRange === 'all') {
            return records;
        }
        
        const now = new Date();
        let startDate, endDate;
        
        switch (this.filters.dateRange) {
            case 'today':
                startDate = new Date(now.getFullYear(), now.getMonth(), now.getDate());
                endDate = new Date(startDate.getTime() + 24 * 60 * 60 * 1000);
                break;
            case 'week':
                const weekStart = new Date(now);
                weekStart.setDate(now.getDate() - now.getDay());
                weekStart.setHours(0, 0, 0, 0);
                startDate = weekStart;
                endDate = new Date(weekStart.getTime() + 7 * 24 * 60 * 60 * 1000);
                break;
            case 'month':
                startDate = new Date(now.getFullYear(), now.getMonth(), 1);
                endDate = new Date(now.getFullYear(), now.getMonth() + 1, 1);
                break;
            case 'custom':
                const startInput = document.getElementById('start-date');
                const endInput = document.getElementById('end-date');
                if (startInput?.value) startDate = new Date(startInput.value);
                if (endInput?.value) endDate = new Date(endInput.value + 'T23:59:59');
                break;
        }
        
        if (startDate || endDate) {
            return records.filter(record => {
                const recordDate = new Date(record.startTime);
                if (startDate && recordDate < startDate) return false;
                if (endDate && recordDate > endDate) return false;
                return true;
            });
        }
        
        return records;
    }

    /**
     * Â∫îÁî®ÊéíÂ∫è
     */
    applySorting(records) {
        return records.sort((a, b) => {
            let aValue, bValue;
            
            switch (this.sortBy) {
                case 'startTime':
                    aValue = new Date(a.startTime).getTime();
                    bValue = new Date(b.startTime).getTime();
                    break;
                case 'accuracy':
                    aValue = a.accuracy;
                    bValue = b.accuracy;
                    break;
                case 'duration':
                    aValue = a.duration;
                    bValue = b.duration;
                    break;
                case 'examTitle':
                    aValue = (a.metadata.examTitle || '').toLowerCase();
                    bValue = (b.metadata.examTitle || '').toLowerCase();
                    break;
                default:
                    aValue = new Date(a.startTime).getTime();
                    bValue = new Date(b.startTime).getTime();
            }
            
            if (this.sortOrder === 'asc') {
                return aValue < bValue ? -1 : aValue > bValue ? 1 : 0;
            } else {
                return aValue > bValue ? -1 : aValue < bValue ? 1 : 0;
            }
        });
    }

    /**
     * Êõ¥Êñ∞ÂéÜÂè≤ÁªüËÆ°‰ø°ÊÅØ
     */
    updateHistoryStats() {
        const totalPractices = this.filteredRecords.length;
        const avgAccuracy = totalPractices > 0 
            ? Math.round(this.filteredRecords.reduce((sum, r) => sum + r.accuracy, 0) / totalPractices * 100)
            : 0;
        const totalTime = this.filteredRecords.reduce((sum, r) => sum + r.duration, 0);
        
        document.getElementById('total-practices').textContent = totalPractices;
        document.getElementById('avg-accuracy').textContent = avgAccuracy + '%';
        document.getElementById('total-time').textContent = Utils.formatDuration(totalTime);
        document.getElementById('filtered-count').textContent = totalPractices;
    }

    /**
     * Ê∏≤ÊüìÂéÜÂè≤ËÆ∞ÂΩïÂàóË°®
     */
    renderHistoryList() {
        const historyList = document.getElementById('history-list');
        if (!historyList) return;
        
        if (this.filteredRecords.length === 0) {
            historyList.innerHTML = `
                <div class="empty-state">
                    <div class="empty-state-icon">üìù</div>
                    <div class="empty-state-title">ÊöÇÊó†ÁªÉ‰π†ËÆ∞ÂΩï</div>
                    <div class="empty-state-description">ÂºÄÂßãÁªÉ‰π†ÂêéÔºåËÆ∞ÂΩïÂ∞ÜÊòæÁ§∫Âú®ËøôÈáå</div>
                </div>
            `;
            return;
        }
        
        // ËÆ°ÁÆóÂΩìÂâçÈ°µÁöÑËÆ∞ÂΩï
        const startIndex = (this.currentPage - 1) * this.recordsPerPage;
        const endIndex = startIndex + this.recordsPerPage;
        const pageRecords = this.filteredRecords.slice(startIndex, endIndex);
        
        historyList.innerHTML = pageRecords.map(record => this.createRecordItem(record)).join('');
    }

    /**
     * ÂàõÂª∫ËÆ∞ÂΩïÈ°πHTML
     */
    createRecordItem(record) {
        const accuracy = Math.round(record.accuracy * 100);
        const duration = Utils.formatDuration(record.duration);
        const startTime = Utils.formatDate(record.startTime, 'YYYY-MM-DD HH:mm');
        
        const accuracyClass = accuracy >= 80 ? 'excellent' : accuracy >= 60 ? 'good' : 'needs-improvement';
        const statusClass = record.status === 'completed' ? 'completed' : 'interrupted';
        
        return `
            <div class="history-record-item" data-record-id="${record.id}">
                <div class="record-main">
                    <div class="record-status">
                        <div class="status-indicator ${statusClass}"></div>
                    </div>
                    <div class="record-content">
                        <h4 class="record-title">${record.metadata.examTitle || record.examId}</h4>
                        <div class="record-meta">
                            <span class="record-category">${record.metadata.category || 'Unknown'}</span>
                            <span class="record-frequency">${record.metadata.frequency === 'high' ? 'È´òÈ¢ë' : 'Ê¨°È´òÈ¢ë'}</span>
                            <span class="record-time">${startTime}</span>
                        </div>
                    </div>
                    <div class="record-stats">
                        <div class="stat-item">
                            <span class="stat-value accuracy-${accuracyClass}">${accuracy}%</span>
                            <span class="stat-label">Ê≠£Á°ÆÁéá</span>
                        </div>
                        <div class="stat-item">
                            <span class="stat-value">${duration}</span>
                            <span class="stat-label">Áî®Êó∂</span>
                        </div>
                        <div class="stat-item">
                            <span class="stat-value">${record.correctAnswers}/${record.totalQuestions}</span>
                            <span class="stat-label">È¢òÁõÆ</span>
                        </div>
                    </div>
                    <div class="record-actions">
                        <button class="btn btn-sm btn-primary" data-history-action="retry" data-record-id="${record.id}">
                            ÈáçÊñ∞ÁªÉ‰π†
                        </button>
                        <button class="btn btn-sm btn-secondary" data-history-action="details" data-record-id="${record.id}">
                            Êü•ÁúãËØ¶ÊÉÖ
                        </button>
                        <button class="btn btn-sm btn-outline" data-history-action="delete" data-record-id="${record.id}">
                            Âà†Èô§
                        </button>
                    </div>
                </div>
            </div>
        `;
    }

    /**
     * Ê∏≤ÊüìÂàÜÈ°µÊéß‰ª∂
     */
    renderPagination() {
        const pagination = document.getElementById('history-pagination');
        if (!pagination) return;
        
        const totalPages = Math.ceil(this.filteredRecords.length / this.recordsPerPage);
        
        if (totalPages <= 1) {
            pagination.innerHTML = '';
            return;
        }
        
        let paginationHTML = '<div class="pagination">';
        
        // ‰∏ä‰∏ÄÈ°µÊåâÈíÆ
        paginationHTML += `
            <button class="page-btn ${this.currentPage === 1 ? 'disabled' : ''}" 
                    data-page="${this.currentPage - 1}">
                ‚Üê ‰∏ä‰∏ÄÈ°µ
            </button>
        `;
        
        // È°µÁ†ÅÊåâÈíÆ
        const startPage = Math.max(1, this.currentPage - 2);
        const endPage = Math.min(totalPages, this.currentPage + 2);
        
        if (startPage > 1) {
            paginationHTML += `<button class="page-btn" data-page="1">1</button>`;
            if (startPage > 2) {
                paginationHTML += `<span class="page-ellipsis">...</span>`;
            }
        }
        
        for (let i = startPage; i <= endPage; i++) {
            paginationHTML += `
                <button class="page-btn ${i === this.currentPage ? 'active' : ''}" 
                        data-page="${i}">
                    ${i}
                </button>
            `;
        }
        
        if (endPage < totalPages) {
            if (endPage < totalPages - 1) {
                paginationHTML += `<span class="page-ellipsis">...</span>`;
            }
            paginationHTML += `<button class="page-btn" data-page="${totalPages}">${totalPages}</button>`;
        }
        
        // ‰∏ã‰∏ÄÈ°µÊåâÈíÆ
        paginationHTML += `
            <button class="page-btn ${this.currentPage === totalPages ? 'disabled' : ''}" 
                    data-page="${this.currentPage + 1}">
                ‰∏ã‰∏ÄÈ°µ ‚Üí
            </button>
        `;
        
        paginationHTML += '</div>';
        
        // È°µÈù¢‰ø°ÊÅØ
        const startRecord = (this.currentPage - 1) * this.recordsPerPage + 1;
        const endRecord = Math.min(this.currentPage * this.recordsPerPage, this.filteredRecords.length);
        
        paginationHTML += `
            <div class="pagination-info">
                ÊòæÁ§∫ ${startRecord}-${endRecord} Êù°ÔºåÂÖ± ${this.filteredRecords.length} Êù°ËÆ∞ÂΩï
            </div>
        `;
        
        pagination.innerHTML = paginationHTML;
    }

    /**
     * Ë∑≥ËΩ¨Âà∞ÊåáÂÆöÈ°µÈù¢
     */
    goToPage(page) {
        const totalPages = Math.ceil(this.filteredRecords.length / this.recordsPerPage);
        
        if (page < 1 || page > totalPages) return;
        
        this.currentPage = page;
        this.renderHistoryList();
        this.renderPagination();
        
        // ÊªöÂä®Âà∞È°∂ÈÉ®
        document.getElementById('history-list').scrollIntoView({ behavior: 'smooth' });
    }

    /**
     * Â§ÑÁêÜËÆ∞ÂΩïÊìç‰Ωú
     */
    handleRecordAction(action, recordId) {
        const record = this.filteredRecords.find(r => r.id === recordId);
        if (!record) return;
        
        switch (action) {
            case 'retry':
                this.retryExam(record);
                break;
            case 'details':
                this.showRecordDetails(recordId);
                break;
            case 'delete':
                this.deleteRecord(recordId);
                break;
        }
    }

    /**
     * ÈáçÊñ∞ÁªÉ‰π†È¢òÁõÆ
     */
    retryExam(record) {
        if (window.app && typeof window.app.openExam === 'function') {
            window.app.openExam(record.examId);
        } else {
            window.showMessage('Êó†Ê≥ïÈáçÊñ∞ÊâìÂºÄÈ¢òÁõÆ', 'error');
        }
    }

    /**
     * ÊòæÁ§∫ËÆ∞ÂΩïËØ¶ÊÉÖ
     */
    showRecordDetails(recordId) {
        const record = this.filteredRecords.find(r => r.id === recordId);
        if (!record) return;
        
        const accuracy = Math.round(record.accuracy * 100);
        const duration = Utils.formatDuration(record.duration);
        const startTime = Utils.formatDate(record.startTime, 'YYYY-MM-DD HH:mm:ss');
        const endTime = Utils.formatDate(record.endTime, 'YYYY-MM-DD HH:mm:ss');
        
        const detailsContent = `
            <div class="record-details-modal">
                <div class="details-header">
                    <h3>ÁªÉ‰π†ËÆ∞ÂΩïËØ¶ÊÉÖ</h3>
                    <button class="close-details" onclick="this.closest('.modal-overlay').remove()">√ó</button>
                </div>
                <div class="details-body">
                    <div class="details-section">
                        <h4>Âü∫Êú¨‰ø°ÊÅØ</h4>
                        <div class="details-grid">
                            <div class="detail-item">
                                <span class="detail-label">È¢òÁõÆÊ†áÈ¢òÔºö</span>
                                <span class="detail-value">${record.metadata.examTitle || record.examId}</span>
                            </div>
                            <div class="detail-item">
                                <span class="detail-label">ÂàÜÁ±ªÔºö</span>
                                <span class="detail-value">${record.metadata.category || 'Unknown'}</span>
                            </div>
                            <div class="detail-item">
                                <span class="detail-label">È¢ëÁéáÔºö</span>
                                <span class="detail-value">${record.metadata.frequency === 'high' ? 'È´òÈ¢ë' : 'Ê¨°È´òÈ¢ë'}</span>
                            </div>
                            <div class="detail-item">
                                <span class="detail-label">Áä∂ÊÄÅÔºö</span>
                                <span class="detail-value">${record.status === 'completed' ? 'Â∑≤ÂÆåÊàê' : '‰∏≠Êñ≠'}</span>
                            </div>
                        </div>
                    </div>
                    
                    <div class="details-section">
                        <h4>Êó∂Èó¥‰ø°ÊÅØ</h4>
                        <div class="details-grid">
                            <div class="detail-item">
                                <span class="detail-label">ÂºÄÂßãÊó∂Èó¥Ôºö</span>
                                <span class="detail-value">${startTime}</span>
                            </div>
                            <div class="detail-item">
                                <span class="detail-label">ÁªìÊùüÊó∂Èó¥Ôºö</span>
                                <span class="detail-value">${endTime}</span>
                            </div>
                            <div class="detail-item">
                                <span class="detail-label">ÊÄªÁî®Êó∂Ôºö</span>
                                <span class="detail-value">${duration}</span>
                            </div>
                        </div>
                    </div>
                    
                    <div class="details-section">
                        <h4>ÊàêÁª©‰ø°ÊÅØ</h4>
                        <div class="details-grid">
                            <div class="detail-item">
                                <span class="detail-label">Ê≠£Á°ÆÁéáÔºö</span>
                                <span class="detail-value accuracy-${accuracy >= 80 ? 'excellent' : accuracy >= 60 ? 'good' : 'needs-improvement'}">${accuracy}%</span>
                            </div>
                            <div class="detail-item">
                                <span class="detail-label">ÊÄªÈ¢òÊï∞Ôºö</span>
                                <span class="detail-value">${record.totalQuestions}</span>
                            </div>
                            <div class="detail-item">
                                <span class="detail-label">Ê≠£Á°ÆÊï∞Ôºö</span>
                                <span class="detail-value">${record.correctAnswers}</span>
                            </div>
                            <div class="detail-item">
                                <span class="detail-label">ÈîôËØØÊï∞Ôºö</span>
                                <span class="detail-value">${record.totalQuestions - record.correctAnswers}</span>
                            </div>
                        </div>
                    </div>
                    
                    ${record.questionTypePerformance && Object.keys(record.questionTypePerformance).length > 0 ? `
                        <div class="details-section">
                            <h4>È¢òÂûãË°®Áé∞</h4>
                            <div class="question-type-performance">
                                ${Object.entries(record.questionTypePerformance).map(([type, perf]) => `
                                    <div class="type-performance-item">
                                        <span class="type-name">${this.formatQuestionType(type)}</span>
                                        <span class="type-stats">${perf.correct || 0}/${perf.total || 0}</span>
                                        <span class="type-accuracy">${Math.round((perf.accuracy || 0) * 100)}%</span>
                                    </div>
                                `).join('')}
                            </div>
                        </div>
                    ` : ''}
                    
                    <div class="details-actions">
                        <button class="btn btn-primary" onclick="window.app.components.practiceHistory.retryExam(${JSON.stringify(record).replace(/"/g, '&quot;')})">
                            ÈáçÊñ∞ÁªÉ‰π†
                        </button>
                        <button class="btn btn-outline" onclick="this.closest('.modal-overlay').remove()">
                            ÂÖ≥Èó≠
                        </button>
                    </div>
                </div>
            </div>
        `;
        
        this.showModal(detailsContent);
    }

    /**
     * Âà†Èô§ËÆ∞ÂΩï
     */
    deleteRecord(recordId) {
        if (!confirm('Á°ÆÂÆöË¶ÅÂà†Èô§ËøôÊù°ÁªÉ‰π†ËÆ∞ÂΩïÂêóÔºüÊ≠§Êìç‰Ωú‰∏çÂèØÊí§ÈîÄ„ÄÇ')) {
            return;
        }
        
        try {
            // ‰ªéÂ≠òÂÇ®‰∏≠Âà†Èô§ËÆ∞ÂΩï
            const allRecords = storage.get('practice_records', []);
            const updatedRecords = allRecords.filter(r => r.id !== recordId);
            storage.set('practice_records', updatedRecords);
            
            // Âà∑Êñ∞ÊòæÁ§∫
            this.refreshHistory();
            
            window.showMessage('ËÆ∞ÂΩïÂ∑≤Âà†Èô§', 'success');
            
        } catch (error) {
            console.error('Failed to delete record:', error);
            window.showMessage('Âà†Èô§ËÆ∞ÂΩïÂ§±Ë¥•', 'error');
        }
    }

    /**
     * ÈáçÁΩÆÁ≠õÈÄâÂô®
     */
    resetFilters() {
        // ÈáçÁΩÆÁ≠õÈÄâÂô®ÂÄº
        this.filters = {
            category: 'all',
            frequency: 'all',
            status: 'all',
            dateRange: 'all',
            minAccuracy: 0,
            maxAccuracy: 100
        };
        this.searchQuery = '';
        this.currentPage = 1;
        
        // ÈáçÁΩÆUI
        document.getElementById('category-filter').value = 'all';
        document.getElementById('frequency-filter').value = 'all';
        document.getElementById('status-filter').value = 'all';
        document.getElementById('date-range-filter').value = 'all';
        document.getElementById('min-accuracy').value = '0';
        document.getElementById('max-accuracy').value = '100';
        document.getElementById('min-accuracy-value').textContent = '0%';
        document.getElementById('max-accuracy-value').textContent = '100%';
        document.getElementById('history-search').value = '';
        document.getElementById('custom-date-range').style.display = 'none';
        
        // ÈáçÊñ∞Â∫îÁî®Á≠õÈÄâ
        this.applyFilters();
    }

    /**
     * Â∫îÁî®Ëá™ÂÆö‰πâÊó•ÊúüËåÉÂõ¥
     */
    applyDateRange() {
        this.applyFilters();
    }

    /**
     * ÂØºÂá∫ÂéÜÂè≤ËÆ∞ÂΩï
     */
    exportHistory() {
        try {
            const practiceRecorder = window.app?.components?.practiceRecorder;
            if (!practiceRecorder) {
                throw new Error('PracticeRecorder not available');
            }
            
            // ÂØºÂá∫‰∏∫JSONÊ†ºÂºè
            const exportData = practiceRecorder.exportData('json');
            
            // ÂàõÂª∫‰∏ãËΩΩÈìæÊé•
            const blob = new Blob([exportData], { type: 'application/json' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `practice_history_${new Date().toISOString().split('T')[0]}.json`;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
            
            window.showMessage('ÂéÜÂè≤ËÆ∞ÂΩïÂ∑≤ÂØºÂá∫', 'success');
            
        } catch (error) {
            console.error('Failed to export history:', error);
            window.showMessage('ÂØºÂá∫Â§±Ë¥•', 'error');
        }
    }

    /**
     * ÊòæÁ§∫ÂØºÂÖ•ÂØπËØùÊ°Ü
     */
    showImportDialog() {
        const importContent = `
            <div class="import-dialog">
                <div class="import-header">
                    <h3>ÂØºÂÖ•ÁªÉ‰π†ËÆ∞ÂΩï</h3>
                    <button class="close-import" onclick="this.closest('.modal-overlay').remove()">√ó</button>
                </div>
                <div class="import-body">
                    <div class="import-options">
                        <label>
                            <input type="radio" name="import-mode" value="merge" checked>
                            ÂêàÂπ∂Ê®°ÂºèÔºà‰øùÁïôÁé∞ÊúâËÆ∞ÂΩïÔºåÊ∑ªÂä†Êñ∞ËÆ∞ÂΩïÔºâ
                        </label>
                        <label>
                            <input type="radio" name="import-mode" value="replace">
                            ÊõøÊç¢Ê®°ÂºèÔºàÂÆåÂÖ®ÊõøÊç¢Áé∞ÊúâËÆ∞ÂΩïÔºâ
                        </label>
                    </div>
                    <div class="file-input-area">
                        <input type="file" id="import-file" accept=".json" style="display: none;">
                        <button class="btn btn-primary" onclick="document.getElementById('import-file').click()">
                            ÈÄâÊã©Êñá‰ª∂
                        </button>
                        <span id="file-name">Êú™ÈÄâÊã©Êñá‰ª∂</span>
                    </div>
                    <div class="import-actions">
                        <button class="btn btn-primary" onclick="window.app.components.practiceHistory.performImport()">
                            ÂØºÂÖ•
                        </button>
                        <button class="btn btn-outline" onclick="this.closest('.modal-overlay').remove()">
                            ÂèñÊ∂à
                        </button>
                    </div>
                </div>
            </div>
        `;
        
        this.showModal(importContent);
        
        // ËÆæÁΩÆÊñá‰ª∂ÈÄâÊã©‰∫ã‰ª∂
        document.getElementById('import-file').addEventListener('change', (e) => {
            const fileName = e.target.files[0]?.name || 'Êú™ÈÄâÊã©Êñá‰ª∂';
            document.getElementById('file-name').textContent = fileName;
        });
    }

    /**
     * ÊâßË°åÂØºÂÖ•
     */
    async performImport() {
        const fileInput = document.getElementById('import-file');
        const file = fileInput.files[0];
        
        if (!file) {
            window.showMessage('ËØ∑ÈÄâÊã©Ë¶ÅÂØºÂÖ•ÁöÑÊñá‰ª∂', 'warning');
            return;
        }
        
        try {
            const importMode = document.querySelector('input[name="import-mode"]:checked').value;
            const fileContent = await this.readFile(file);
            
            const practiceRecorder = window.app?.components?.practiceRecorder;
            if (!practiceRecorder) {
                throw new Error('PracticeRecorder not available');
            }
            
            await practiceRecorder.importData(fileContent, { merge: importMode === 'merge' });
            
            // ÂÖ≥Èó≠ÂØπËØùÊ°Ü
            document.querySelector('.modal-overlay').remove();
            
            // Âà∑Êñ∞ÂéÜÂè≤ËÆ∞ÂΩï
            this.refreshHistory();
            
            window.showMessage('Êï∞ÊçÆÂØºÂÖ•ÊàêÂäü', 'success');
            
        } catch (error) {
            console.error('Failed to import data:', error);
            window.showMessage('ÂØºÂÖ•Â§±Ë¥•Ôºö' + error.message, 'error');
        }
    }

    /**
     * ËØªÂèñÊñá‰ª∂ÂÜÖÂÆπ
     */
    readFile(file) {
        return new Promise((resolve, reject) => {
            const reader = new FileReader();
            reader.onload = (e) => resolve(e.target.result);
            reader.onerror = (e) => reject(new Error('Êñá‰ª∂ËØªÂèñÂ§±Ë¥•'));
            reader.readAsText(file);
        });
    }

    /**
     * Ê†ºÂºèÂåñÈ¢òÂûãÂêçÁß∞
     */
    formatQuestionType(type) {
        const typeMap = {
            'heading-matching': 'Ê†áÈ¢òÂåπÈÖç',
            'true-false-not-given': 'Âà§Êñ≠È¢ò',
            'yes-no-not-given': 'ÊòØÈùûÈ¢ò',
            'multiple-choice': 'ÈÄâÊã©È¢ò',
            'matching-information': '‰ø°ÊÅØÂåπÈÖç',
            'matching-people-ideas': '‰∫∫Áâ©ËßÇÁÇπÂåπÈÖç',
            'summary-completion': 'ÊëòË¶ÅÂ°´Á©∫',
            'sentence-completion': 'Âè•Â≠êÂ°´Á©∫',
            'short-answer': 'ÁÆÄÁ≠îÈ¢ò',
            'diagram-labelling': 'ÂõæË°®Ê†áÊ≥®',
            'flow-chart': 'ÊµÅÁ®ãÂõæ',
            'table-completion': 'Ë°®Ê†ºÂ°´Á©∫'
        };
        return typeMap[type] || type;
    }

    /**
     * ÊòæÁ§∫Ê®°ÊÄÅÊ°Ü
     */
    showModal(content) {
        const modalOverlay = document.createElement('div');
        modalOverlay.className = 'modal-overlay show';
        modalOverlay.innerHTML = `<div class="modal">${content}</div>`;
        
        document.body.appendChild(modalOverlay);
        
        // ÁÇπÂáªËÉåÊôØÂÖ≥Èó≠
        modalOverlay.addEventListener('click', (e) => {
            if (e.target === modalOverlay) {
                modalOverlay.remove();
            }
        });
        
        // ESCÈîÆÂÖ≥Èó≠
        const escHandler = (e) => {
            if (e.key === 'Escape') {
                modalOverlay.remove();
                document.removeEventListener('keydown', escHandler);
            }
        };
        document.addEventListener('keydown', escHandler);
    }

    /**
     * ÊòæÁ§∫ÈîôËØØ‰ø°ÊÅØ
     */
    showError(message) {
        const historyList = document.getElementById('history-list');
        if (historyList) {
            historyList.innerHTML = `
                <div class="error-state">
                    <div class="error-state-icon">‚ö†Ô∏è</div>
                    <div class="error-state-title">Âä†ËΩΩÂ§±Ë¥•</div>
                    <div class="error-state-description">${message}</div>
                    <button class="btn btn-primary" onclick="window.app.components.practiceHistory.refreshHistory()">
                        ÈáçËØï
                    </button>
                </div>
            `;
        }
    }

    /**
     * ÈîÄÊØÅÁªÑ‰ª∂
     */
    destroy() {
        console.log('PracticeHistory component destroyed');
    }
}

// Á°Æ‰øùÂÖ®Â±ÄÂèØÁî®
window.PracticeHistory = PracticeHistory;