/**
 * ExamBrowser错误恢复组件
 * 处理异常情况并提供自动恢复功能
 */
class ExamBrowserRecovery {
    constructor(examBrowser) {
        this.examBrowser = examBrowser;
        this.errorCount = 0;
        this.maxErrors = 5;
        this.recoveryStrategies = [
            this.reInitializeDOM,
            this.reloadExamData,
            this.fallbackToBasicView,
            this.resetToDefault,
            this.showCriticalError
        ];
        this.lastErrorTime = null;
        this.errorTypes = new Map();
        
        this.initialize();
    }
    
    /**
     * 初始化错误恢复机制
     */
    initialize() {
        console.log('[ExamBrowserRecovery] 初始化错误恢复机制');
        
        // 监听全局错误
        this.setupGlobalErrorHandling();
        
        // 定期检查系统健康状况
        this.setupHealthCheck();
    }
    
    /**
     * 设置全局错误处理
     */
    setupGlobalErrorHandling() {
        // 监听JavaScript错误
        window.addEventListener('error', (event) => {
            if (this.isExamBrowserRelated(event)) {
                this.handleError(event.error, 'JavaScript Error', {
                    filename: event.filename,
                    lineno: event.lineno,
                    colno: event.colno
                });
            }
        });
        
        // 监听Promise错误
        window.addEventListener('unhandledrejection', (event) => {
            if (this.isExamBrowserRelated(event)) {\n                this.handleError(event.reason, 'Promise Rejection');\n            }\n        });\n        \n        // 监听自定义错误事件\n        document.addEventListener('examBrowserError', (event) => {\n            this.handleError(event.detail.error, event.detail.context, event.detail.options);\n        });\n    }\n    \n    /**\n     * 检查错误是否与ExamBrowser相关\n     */\n    isExamBrowserRelated(event) {\n        const error = event.error || event.reason;\n        const stack = error?.stack || '';\n        const message = error?.message || '';\n        \n        // 检查堆栈信息或错误消息中是否包含ExamBrowser相关内容\n        return stack.includes('ExamBrowser') || \n               stack.includes('examBrowser') ||\n               message.includes('exam-list') ||\n               message.includes('browse-view') ||\n               (event.filename && event.filename.includes('examBrowser'));\n    }\n    \n    /**\n     * 处理错误\n     */\n    handleError(error, context, options = {}) {\n        this.errorCount++;\n        \n        // 记录错误类型统计\n        const errorType = error?.name || 'Unknown';\n        this.errorTypes.set(errorType, (this.errorTypes.get(errorType) || 0) + 1);\n        \n        console.error(`[ExamBrowserRecovery] 错误 ${this.errorCount}:`, error);\n        console.error(`[ExamBrowserRecovery] 上下文:`, context);\n        console.error(`[ExamBrowserRecovery] 选项:`, options);\n        \n        // 记录错误到本地存储\n        this.logError(error, context, options);\n        \n        // 检查是否达到最大错误次数\n        if (this.errorCount > this.maxErrors) {\n            this.handleCriticalFailure();\n            return;\n        }\n        \n        // 选择恢复策略\n        const strategyIndex = Math.min(this.errorCount - 1, this.recoveryStrategies.length - 1);\n        const strategy = this.recoveryStrategies[strategyIndex];\n        \n        try {\n            strategy.call(this, error, context, options);\n        } catch (recoveryError) {\n            console.error('[ExamBrowserRecovery] 恢复策略失败:', recoveryError);\n            // 递归调用下一个策略\n            this.handleError(recoveryError, 'Recovery Strategy Failed');\n        }\n    }\n    \n    /**\n     * 恢复策略1: 重新初始化DOM结构\n     */\n    reInitializeDOM(error, context) {\n        console.log('[ExamBrowserRecovery] 策略1: 重新初始化DOM结构');\n        \n        try {\n            // 确保DOM结构存在\n            if (this.examBrowser && this.examBrowser.ensureDOMStructure) {\n                this.examBrowser.ensureDOMStructure();\n            }\n            \n            // 重新初始化组件\n            if (this.examBrowser && this.examBrowser.initialize) {\n                this.examBrowser.initialize();\n            }\n            \n            this.showRecoveryMessage('DOM结构已重新初始化', 'info');\n            \n        } catch (initError) {\n            console.error('[ExamBrowserRecovery] DOM重新初始化失败:', initError);\n            throw initError;\n        }\n    }\n    \n    /**\n     * 恢复策略2: 重新加载题目数据\n     */\n    reloadExamData(error, context) {\n        console.log('[ExamBrowserRecovery] 策略2: 重新加载题目数据');\n        \n        try {\n            // 重新加载题库\n            if (window.loadLibrary) {\n                window.loadLibrary();\n            }\n            \n            // 延迟刷新列表\n            setTimeout(() => {\n                if (this.examBrowser && this.examBrowser.refreshExamList) {\n                    this.examBrowser.refreshExamList();\n                }\n            }, 1000);\n            \n            this.showRecoveryMessage('题目数据已重新加载', 'info');\n            \n        } catch (loadError) {\n            console.error('[ExamBrowserRecovery] 数据重新加载失败:', loadError);\n            throw loadError;\n        }\n    }\n    \n    /**\n     * 恢复策略3: 启用基础视图模式\n     */\n    fallbackToBasicView(error, context) {\n        console.log('[ExamBrowserRecovery] 策略3: 启用基础视图模式');\n        \n        try {\n            const container = document.getElementById('exam-list-container');\n            if (container) {\n                container.innerHTML = this.generateBasicFallbackHTML();\n            }\n            \n            // 禁用高级功能\n            this.disableAdvancedFeatures();\n            \n            this.showRecoveryMessage('已启用基础视图模式', 'warning');\n            \n        } catch (fallbackError) {\n            console.error('[ExamBrowserRecovery] 基础视图模式启用失败:', fallbackError);\n            throw fallbackError;\n        }\n    }\n    \n    /**\n     * 恢复策略4: 重置到默认状态\n     */\n    resetToDefault(error, context) {\n        console.log('[ExamBrowserRecovery] 策略4: 重置到默认状态');\n        \n        try {\n            // 清除本地存储的浏览状态\n            localStorage.removeItem('browse_state');\n            \n            // 重置ExamBrowser状态\n            if (this.examBrowser) {\n                this.examBrowser.resetBrowseState();\n            }\n            \n            // 重新加载页面（最后手段）\n            setTimeout(() => {\n                if (confirm('系统遇到问题，是否重新加载页面？')) {\n                    window.location.reload();\n                }\n            }, 2000);\n            \n            this.showRecoveryMessage('系统已重置到默认状态', 'warning');\n            \n        } catch (resetError) {\n            console.error('[ExamBrowserRecovery] 重置失败:', resetError);\n            throw resetError;\n        }\n    }\n    \n    /**\n     * 恢复策略5: 显示严重错误\n     */\n    showCriticalError(error, context) {\n        console.log('[ExamBrowserRecovery] 策略5: 显示严重错误');\n        \n        const container = document.getElementById('exam-list-container');\n        if (container) {\n            container.innerHTML = this.generateCriticalErrorHTML(error, context);\n        }\n        \n        this.showRecoveryMessage('系统遇到严重错误，请刷新页面', 'error');\n    }\n    \n    /**\n     * 处理彻底失败\n     */\n    handleCriticalFailure() {\n        console.error('[ExamBrowserRecovery] 达到最大错误次数，进入彻底失败模式');\n        \n        // 显示用户友好的错误页面\n        const container = document.getElementById('exam-list-container');\n        if (container) {\n            container.innerHTML = `\n                <div class=\"critical-failure\">\n                    <div class=\"failure-icon\">❌</div>\n                    <h2>系统遇到严重问题</h2>\n                    <p>题库浏览器遇到了无法自动恢复的错误。</p>\n                    <div class=\"failure-stats\">\n                        <p>错误次数: ${this.errorCount}</p>\n                        <p>错误类型: ${Array.from(this.errorTypes.keys()).join(', ')}</p>\n                    </div>\n                    <div class=\"failure-actions\">\n                        <button class=\"btn btn-primary\" onclick=\"window.location.reload()\">\n                            重新加载页面\n                        </button>\n                        <button class=\"btn btn-secondary\" onclick=\"this.exportErrorLog()\">\n                            导出错误日志\n                        </button>\n                    </div>\n                </div>\n            `;\n        }\n        \n        // 导出错误日志\n        this.exportErrorLog();\n    }\n    \n    /**\n     * 生成基础降级HTML\n     */\n    generateBasicFallbackHTML() {\n        return `\n            <div class=\"fallback-browser\">\n                <div class=\"fallback-header\">\n                    <h3>📚 基础题库浏览</h3>\n                    <p>系统正在基础模式下运行</p>\n                </div>\n                <div class=\"fallback-controls\">\n                    <button class=\"btn\" onclick=\"window.location.reload()\">刷新页面</button>\n                    <button class=\"btn btn-secondary\" onclick=\"window.loadLibrary()\">重新加载题库</button>\n                </div>\n                <div class=\"fallback-list\" id=\"fallback-exam-list\">\n                    <p>正在加载题目列表...</p>\n                </div>\n            </div>\n        `;\n    }\n    \n    /**\n     * 生成严重错误HTML\n     */\n    generateCriticalErrorHTML(error, context) {\n        return `\n            <div class=\"critical-error\">\n                <div class=\"error-icon\">⚠️</div>\n                <h3>系统错误</h3>\n                <p>错误信息: ${error?.message || '未知错误'}</p>\n                <p>错误上下文: ${context}</p>\n                <div class=\"error-actions\">\n                    <button class=\"btn\" onclick=\"window.location.reload()\">\n                        重新加载页面\n                    </button>\n                    <button class=\"btn btn-secondary\" onclick=\"console.log('错误详情:', '${JSON.stringify({error: error?.message, context})}')\">\n                        查看详情\n                    </button>\n                </div>\n            </div>\n        `;\n    }\n    \n    /**\n     * 禁用高级功能\n     */\n    disableAdvancedFeatures() {\n        // 禁用虚拟滚动\n        if (this.examBrowser && this.examBrowser.virtualScroller) {\n            this.examBrowser.virtualScroller.destroy();\n            this.examBrowser.virtualScroller = null;\n        }\n        \n        // 禁用性能优化\n        if (window.performanceOptimizer) {\n            window.performanceOptimizer.destroy();\n        }\n        \n        console.log('[ExamBrowserRecovery] 高级功能已禁用');\n    }\n    \n    /**\n     * 设置健康检查\n     */\n    setupHealthCheck() {\n        setInterval(() => {\n            this.performHealthCheck();\n        }, 30000); // 每30秒检查一次\n    }\n    \n    /**\n     * 执行健康检查\n     */\n    performHealthCheck() {\n        try {\n            // 检查关键DOM元素\n            const criticalElements = [\n                'browse-view',\n                'exam-list-container',\n                'exam-list'\n            ];\n            \n            for (const elementId of criticalElements) {\n                if (!document.getElementById(elementId)) {\n                    throw new Error(`关键元素缺失: ${elementId}`);\n                }\n            }\n            \n            // 检查ExamBrowser实例\n            if (!this.examBrowser || !this.examBrowser.initialized) {\n                throw new Error('ExamBrowser实例未正确初始化');\n            }\n            \n        } catch (healthError) {\n            console.warn('[ExamBrowserRecovery] 健康检查失败:', healthError);\n            this.handleError(healthError, 'Health Check Failed');\n        }\n    }\n    \n    /**\n     * 记录错误到本地存储\n     */\n    logError(error, context, options) {\n        try {\n            const errorLog = {\n                id: Date.now() + '_' + Math.random().toString(36).substr(2, 9),\n                timestamp: new Date().toISOString(),\n                error: {\n                    name: error?.name || 'Unknown',\n                    message: error?.message || 'No message',\n                    stack: error?.stack || 'No stack trace'\n                },\n                context,\n                options,\n                userAgent: navigator.userAgent,\n                url: window.location.href,\n                viewport: {\n                    width: window.innerWidth,\n                    height: window.innerHeight\n                }\n            };\n            \n            const existingLogs = JSON.parse(localStorage.getItem('exam_browser_error_log') || '[]');\n            existingLogs.push(errorLog);\n            \n            // 只保留最近50个错误\n            if (existingLogs.length > 50) {\n                existingLogs.splice(0, existingLogs.length - 50);\n            }\n            \n            localStorage.setItem('exam_browser_error_log', JSON.stringify(existingLogs));\n            \n        } catch (logError) {\n            console.error('[ExamBrowserRecovery] 记录错误失败:', logError);\n        }\n    }\n    \n    /**\n     * 导出错误日志\n     */\n    exportErrorLog() {\n        try {\n            const errorLog = localStorage.getItem('exam_browser_error_log');\n            if (errorLog) {\n                const blob = new Blob([errorLog], { type: 'application/json' });\n                const url = URL.createObjectURL(blob);\n                const a = document.createElement('a');\n                a.href = url;\n                a.download = `exam_browser_errors_${new Date().toISOString().slice(0, 10)}.json`;\n                document.body.appendChild(a);\n                a.click();\n                document.body.removeChild(a);\n                URL.revokeObjectURL(url);\n                \n                console.log('[ExamBrowserRecovery] 错误日志已导出');\n            }\n        } catch (exportError) {\n            console.error('[ExamBrowserRecovery] 导出错误日志失败:', exportError);\n        }\n    }\n    \n    /**\n     * 显示恢复消息\n     */\n    showRecoveryMessage(message, type = 'info') {\n        if (window.showMessage) {\n            window.showMessage(`[恢复] ${message}`, type);\n        } else {\n            console.log(`[ExamBrowserRecovery] ${message}`);\n        }\n    }\n    \n    /**\n     * 获取错误统计\n     */\n    getErrorStats() {\n        return {\n            totalErrors: this.errorCount,\n            errorTypes: Object.fromEntries(this.errorTypes),\n            lastErrorTime: this.lastErrorTime,\n            maxErrors: this.maxErrors\n        };\n    }\n    \n    /**\n     * 重置错误计数\n     */\n    resetErrorCount() {\n        console.log('[ExamBrowserRecovery] 重置错误计数');\n        this.errorCount = 0;\n        this.errorTypes.clear();\n        this.lastErrorTime = null;\n    }\n    \n    /**\n     * 销毁错误恢复机制\n     */\n    destroy() {\n        console.log('[ExamBrowserRecovery] 销毁错误恢复机制');\n        \n        // 移除事件监听器\n        // 注意：全局错误监听器通常不需要移除，因为它们是全局的\n        \n        // 清理引用\n        this.examBrowser = null;\n    }\n}\n\n// 导出到全局\nwindow.ExamBrowserRecovery = ExamBrowserRecovery;